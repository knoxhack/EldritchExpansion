plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply false
}

apply plugin: 'java'

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    version = mod_version
    group = mod_group_id
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }
}

// Subprojects configuration
subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    
    minecraft {
        mappings channel: mappings_channel, version: mappings_version
        
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        
        runs {
            client {
                workingDirectory project.file('run')
                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'
                
                mods {
                    "${mod_id}" {
                        source sourceSets.main
                    }
                }
            }
            
            server {
                workingDirectory project.file('run')
                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'
                
                mods {
                    "${mod_id}" {
                        source sourceSets.main
                    }
                }
            }
            
            data {
                workingDirectory project.file('run')
                property 'forge.logging.markers', 'REGISTRIES'
                property 'forge.logging.console.level', 'debug'
                args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
                
                mods {
                    "${mod_id}" {
                        source sourceSets.main
                    }
                }
            }
        }
    }
    
    // Common dependencies for all modules
    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
        
        // JEI - Just Enough Items (optional helper dependency)
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api"))
        runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}"))
        
        // For mixin annotation processor
        annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    }
    
    // Basic Manifest setup
    jar {
        manifest {
            attributes([
                "Specification-Title"     : project.mod_name,
                "Specification-Vendor"    : project.mod_authors,
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.mod_name,
                "Implementation-Version"  : project.mod_version,
                "Implementation-Vendor"   : project.mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }
}

// Root project tasks to build all modules
task buildAllModules(type: GradleBuild) {
    tasks = ['clean', ':core:build', ':voidalchemy:build', ':eldritchartifacts:build', 
             ':obsidianforgemaster:build', ':voidcorruption:build', ':eldritcharcana:build', 
             ':obsidianconstructs:build', ':all:build']
}

// Task to collect all module JARs
task collectModuleJars(type: Copy) {
    description = "Collects all module JARs into a single directory"
    group = "build"
    
    dependsOn buildAllModules
    
    from(project(':core').tasks.jar)
    from(project(':voidalchemy').tasks.jar)
    from(project(':eldritchartifacts').tasks.jar)
    from(project(':obsidianforgemaster').tasks.jar)
    from(project(':voidcorruption').tasks.jar)
    from(project(':eldritcharcana').tasks.jar)
    from(project(':obsidianconstructs').tasks.jar)
    from(project(':all').tasks.jar)
    
    into "${buildDir}/libs/modules"
    
    rename { String fileName ->
        def moduleName = fileName.split('-')[0]
        "${moduleName}_${mod_id}-${version}.jar"
    }
}

// Default build task will build and collect all module JARs
build.finalizedBy collectModuleJars